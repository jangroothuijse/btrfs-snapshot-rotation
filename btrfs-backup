#!/bin/bash

# Goal: send snapshots to other disks or remote hosts, to backup the snapshots.
# on local disks it only depends on btrfs tools, on remote systems it depends on
# ssh (and login using public/private keys), rsync and btrfs tools.

# in order to install this script, please use lockFile (from daemontools package).

# Parse arguments
SRC=$1
DST=$2
SNAP=$3
HOST=$4

bypass='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

# Check that DST is available, exit without errors if it is not.
if [ ! "$HOST" = "localhost" ]
	then # if it is up, check that the DST exists
		if ! $bypass -q "$HOST" exit;
			then # Assume host is down, or back disk not mounted.
				exit
		fi
	else # Local backup, could be to removable media, so check if it exists.
		if [ ! -e "$DST" ]
			then # Assume backup disk is not mounted.
				exit
		fi
fi

# for each source snapshot, ordered by age ASC.
for snapshot in $(find "$SRC"|sort |grep @"${SNAP}"\$); do
	echo "Backing up $snapshot"
	# if snapshot already exists in DST then skip
	if [ ! "$HOST" = "localhost" ]
		then # for remote backups use ssh to see if the snapshot already exists.
			if $bypass "$HOST" stat "$DST"/"$snapshot" \> /dev/null 2\>\&1
				then # file exists in backup already
					echo "File exists in backup, using for reference: $snapshot"
					prev=$snapshot # update prev, it may be used to diff.
					continue
			fi
		else # on local backups we can just check if the file exists.
			if [ -e "$DST"/"$snapshot" ]
				then # file exists in backup already
				echo "Snapshot $snapshot already exists in dst $DST"
				prev=$snapshot # update prev, it may be used to diff.
				continue
			fi
	fi
	# if this was the first (oldest) snapshot, then send the whole thing.
	if [ -z "$prev" ]
		then # create a full backup.
			if [ ! "$HOST" = "localhost" ]
				then # Remote full backup, diff to file, use rsync as transport.
					echo "Sending full snapshot $snapshot through ssh directly"
					backup="full_$snapshot"
					btrfs send "$SRC"/"$snapshot" | "$bypass" "$HOST" "btrfs receive $DST"
				else # Local full backup, pipe diff to DST fs.
					echo "Sending full snapshot $snapshot through pipe"
					btrfs send "$SRC"/"$snapshot" | btrfs receive "$DST"
			fi
		else # only send the diff between this and prev.
			if [ "$HOST" != "localhost" ]
				then # remote incremental backup
					backup="delta_$snapshot"
					echo "Sending incremental from $prev to $snapshot using rsync"
					btrfs send -f /tmp/"$backup" -p "$SRC"/"$prev" "$SRC"/"$snapshot"
					echo "rsync -partial /tmp/$backup $HOST:/tmp/$backup"
					rsync -partial /tmp/"$backup" "$HOST":/tmp/"$backup"
					$bypass "$HOST" btrfs receive -f /tmp/"$backup" "$DST"/"$snapshot"
				else # local incremental backup
					echo "Sending incremental from $prev to $snapshot through pipe"
					btrfs send -p "$SRC"/"$prev" "$SRC"/"$snapshot" | btrfs receive "$DST"
			fi
	fi
	# update prev, it may be used to diff.
	prev=$snapshot
done;
